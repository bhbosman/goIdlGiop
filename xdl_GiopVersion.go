// Code generated by me. DO NOT EDIT.

package goIdlGiop

import __goidl__ "github.com/bhbosman/goidl"
import __json__ "encoding/json"
import __reflect__ "reflect"

// Struct declaration: "GIOP::Version", generatedBy by: "WriteStructDcl"
// Exception Decl: false
type GiopVersion struct {
	__goidl__.IdlObject
	Major byte `json:"Major"`
	Minor byte `json:"Minor"`
}

//noinspection GoSnakeCaseUsage
const GiopVersionId_Const = "IDL:omg.org/GIOP/Version:1.0"

func (self *GiopVersion) String() string {
	b, err := __json__.Marshal(self)
	if err != nil {
		return ""
	}
	return string(b)
}

func (self *GiopVersion) GoString() string {
	return self.String()
}

func (self *GiopVersion) ReadValue(stream __goidl__.IReadAny) error {
	var err error
	err = self.IdlObject.ReadValue(stream)
	if err != nil {
		return err
	}
	// WriteStructHelper::WriteStructMemberExtractValue(IdlOctetKind)
	self.Major, err = __goidl__.IdlOctetHelper.Read(stream)
	if err != nil {
		return err
	}
	// WriteStructHelper::WriteStructMemberExtractValue(IdlOctetKind)
	self.Minor, err = __goidl__.IdlOctetHelper.Read(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *GiopVersion) Read(stream __goidl__.IReadAny) error {
	err := self.ReadValue(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *GiopVersion) Write(stream __goidl__.IWriteAny) error {
	var err error
	err = self.IdlObject.Write(stream)
	if err != nil {
		return err
	}
	// WriteStructHelper::WriteStructMemberInsert(IdlOctetKind)
	err = __goidl__.IdlOctetHelper.Write(stream, self.Major)
	if err != nil {
		return err
	}
	// WriteStructHelper::WriteStructMemberInsert(IdlOctetKind)
	err = __goidl__.IdlOctetHelper.Write(stream, self.Minor)
	if err != nil {
		return err
	}
	return nil
}

//noinspection GoSnakeCaseUsage
type GiopVersion_Helper struct {
}


//noinspection GoUnusedGlobalVariable
var GiopVersionHelper = GiopVersion_Helper{}

func init() {
	__goidl__.AddRegistration(
		__goidl__.NewRegistrationInformation(
			GiopVersionId_Const,
			__goidl__.StructType,
			"GIOP.idl",
			"xdl_GiopVersion.go",
			func() __goidl__.IIdlObject {
				return &GiopVersion{}
			},
			func(generator __goidl__.IRandomDataGenerator) __goidl__.IIdlObject {
				return &GiopVersion{}
			},
			__reflect__.TypeOf((*GiopVersion)(nil))))
}
